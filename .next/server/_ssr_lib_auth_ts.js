"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_auth_ts";
exports.ids = ["_ssr_lib_auth_ts"];
exports.modules = {

/***/ "(ssr)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activateUser: () => (/* binding */ activateUser),\n/* harmony export */   clearStoredUser: () => (/* binding */ clearStoredUser),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getNextUserId: () => (/* binding */ getNextUserId),\n/* harmony export */   getStoredUser: () => (/* binding */ getStoredUser),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   initializeDefaultUsers: () => (/* binding */ initializeDefaultUsers),\n/* harmony export */   saveUserToDatabase: () => (/* binding */ saveUserToDatabase),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   storeUser: () => (/* binding */ storeUser),\n/* harmony export */   suspendUserWithReason: () => (/* binding */ suspendUserWithReason),\n/* harmony export */   toggleUserSuspension: () => (/* binding */ toggleUserSuspension),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n// Authentication utilities and types\nfunction getAllUsers() {\n    if (true) return [];\n    const stored = localStorage.getItem(\"users_database\");\n    return stored ? JSON.parse(stored) : [];\n}\nfunction saveUserToDatabase(user) {\n    if (true) return;\n    const users = getAllUsers();\n    const existingIndex = users.findIndex((u)=>u.email === user.email);\n    if (existingIndex >= 0) {\n        users[existingIndex] = user;\n    } else {\n        users.push(user);\n    }\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n}\nfunction getNextUserId() {\n    const users = getAllUsers();\n    const maxId = users.reduce((max, user)=>{\n        const numId = Number.parseInt(user.id);\n        return isNaN(numId) ? max : Math.max(max, numId);\n    }, 0);\n    return String(maxId + 1).padStart(2, \"0\");\n}\nfunction initializeDefaultUsers() {\n    const users = getAllUsers();\n    if (users.length === 0) {\n        const defaultUsers = [\n            {\n                id: \"01\",\n                email: \"admin@marketplace.com\",\n                firstName: \"Admin\",\n                lastName: \"User\",\n                username: \"admin\",\n                userType: \"admin\",\n                isVerified: true,\n                deposit: 0,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: \"02\",\n                email: \"worker1@marketplace.com\",\n                firstName: \"John\",\n                lastName: \"Worker\",\n                username: \"johnworker\",\n                userType: \"user\",\n                isVerified: true,\n                deposit: 0,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: \"03\",\n                email: \"employer1@marketplace.com\",\n                firstName: \"Jane\",\n                lastName: \"Employer\",\n                username: \"janeemployer\",\n                userType: \"user\",\n                isVerified: true,\n                deposit: 100,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            }\n        ];\n        defaultUsers.forEach((user)=>saveUserToDatabase(user));\n        console.log(\"[v0] âœ… Initialized default users:\", defaultUsers.map((u)=>`${u.firstName} ${u.lastName} (ID: ${u.id})`));\n    }\n}\n// Mock authentication functions (replace with real API calls when database is connected)\nasync function signIn(email, password) {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 1000));\n    const users = getAllUsers();\n    const user = users.find((u)=>u.email === email);\n    if (!user) {\n        throw new Error(\"Invalid email or password\");\n    }\n    if (user.userType === \"suspended\") {\n        const reason = user.suspensionReason || \"No reason provided\";\n        throw new Error(`Your account has been suspended. Reason: ${reason}`);\n    }\n    if (email === \"admin@marketplace.com\" && password === \"admin123\") {\n        console.log(\"[v0] Admin login successful for:\", user.email);\n        return user;\n    }\n    if (password === \"password123\" || password.length >= 8) {\n        console.log(\"[v0] User login successful for:\", user.email);\n        return user;\n    }\n    throw new Error(\"Invalid email or password\");\n}\nasync function signUp(data) {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 1000));\n    if (!isValidEmail(data.email)) {\n        throw new Error(\"Please enter a valid email address\");\n    }\n    if (data.password.length < 8) {\n        throw new Error(\"Password must be at least 8 characters long\");\n    }\n    if (!isValidPassword(data.password)) {\n        throw new Error(\"Password must contain at least one uppercase letter, one lowercase letter, and one number\");\n    }\n    if (data.username.length < 3) {\n        throw new Error(\"Username must be at least 3 characters long\");\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(data.username)) {\n        throw new Error(\"Username can only contain letters, numbers, and underscores\");\n    }\n    const users = getAllUsers();\n    const existingUser = users.find((u)=>u.email === data.email || u.username === data.username);\n    if (existingUser) {\n        if (existingUser.email === data.email) {\n            throw new Error(\"An account with this email already exists\");\n        } else {\n            throw new Error(\"This username is already taken\");\n        }\n    }\n    const newUser = {\n        id: getNextUserId(),\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        username: data.username,\n        userType: \"user\",\n        isVerified: false,\n        deposit: 0,\n        earning: 0,\n        country: \"United States\",\n        createdAt: new Date().toISOString()\n    };\n    saveUserToDatabase(newUser);\n    return newUser;\n}\nasync function signOut() {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n}\nfunction getStoredUser() {\n    if (true) return null;\n    const stored = localStorage.getItem(\"user\");\n    return stored ? JSON.parse(stored) : null;\n}\nfunction storeUser(user) {\n    if (true) return;\n    localStorage.setItem(\"user\", JSON.stringify(user));\n}\nfunction clearStoredUser() {\n    if (true) return;\n    localStorage.removeItem(\"user\");\n}\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\nfunction isValidPassword(password) {\n    // At least 8 characters, one uppercase, one lowercase, one number\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n    return passwordRegex.test(password);\n}\nfunction updateUser(userId, updates) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        ...updates\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction toggleUserSuspension(userId) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const user = users[userIndex];\n    // Toggle between user and suspended status (using a custom field)\n    const updatedUser = {\n        ...user,\n        isSuspended: !user.isSuspended\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction suspendUserWithReason(userId, reason, suspendedBy) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        userType: \"suspended\",\n        suspensionReason: reason,\n        suspendedAt: new Date().toISOString(),\n        suspendedBy: suspendedBy\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction activateUser(userId) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        userType: \"user\",\n        suspensionReason: undefined,\n        suspendedAt: undefined,\n        suspendedBy: undefined\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nasync function getUser() {\n    // In a real implementation, this would validate JWT tokens or session cookies\n    // For now, we'll simulate getting the current user from localStorage on the client\n    // or return null on the server (since we don't have real session management)\n    if (true) {\n        // Server-side: In a real app, you'd validate session tokens here\n        // For demo purposes, return a mock admin user for API calls\n        return {\n            id: \"01\",\n            email: \"admin@marketplace.com\",\n            firstName: \"Admin\",\n            lastName: \"User\",\n            username: \"admin\",\n            userType: \"admin\",\n            isVerified: true,\n            deposit: 0,\n            earning: 0,\n            country: \"United States\",\n            createdAt: new Date().toISOString()\n        };\n    }\n    // Client-side: Get user from localStorage\n    return getStoredUser();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/auth.ts\n");

/***/ })

};
;