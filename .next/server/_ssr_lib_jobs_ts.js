"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_jobs_ts";
exports.ids = ["_ssr_lib_jobs_ts"];
exports.modules = {

/***/ "(ssr)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   activateUser: () => (/* binding */ activateUser),\n/* harmony export */   clearStoredUser: () => (/* binding */ clearStoredUser),\n/* harmony export */   getAllUsers: () => (/* binding */ getAllUsers),\n/* harmony export */   getNextUserId: () => (/* binding */ getNextUserId),\n/* harmony export */   getStoredUser: () => (/* binding */ getStoredUser),\n/* harmony export */   getUser: () => (/* binding */ getUser),\n/* harmony export */   initializeDefaultUsers: () => (/* binding */ initializeDefaultUsers),\n/* harmony export */   saveUserToDatabase: () => (/* binding */ saveUserToDatabase),\n/* harmony export */   signIn: () => (/* binding */ signIn),\n/* harmony export */   signOut: () => (/* binding */ signOut),\n/* harmony export */   signUp: () => (/* binding */ signUp),\n/* harmony export */   storeUser: () => (/* binding */ storeUser),\n/* harmony export */   suspendUserWithReason: () => (/* binding */ suspendUserWithReason),\n/* harmony export */   toggleUserSuspension: () => (/* binding */ toggleUserSuspension),\n/* harmony export */   updateUser: () => (/* binding */ updateUser)\n/* harmony export */ });\n// Authentication utilities and types\nfunction getAllUsers() {\n    if (true) return [];\n    const stored = localStorage.getItem(\"users_database\");\n    return stored ? JSON.parse(stored) : [];\n}\nfunction saveUserToDatabase(user) {\n    if (true) return;\n    const users = getAllUsers();\n    const existingIndex = users.findIndex((u)=>u.email === user.email);\n    if (existingIndex >= 0) {\n        users[existingIndex] = user;\n    } else {\n        users.push(user);\n    }\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n}\nfunction getNextUserId() {\n    const users = getAllUsers();\n    const maxId = users.reduce((max, user)=>{\n        const numId = Number.parseInt(user.id);\n        return isNaN(numId) ? max : Math.max(max, numId);\n    }, 0);\n    return String(maxId + 1).padStart(2, \"0\");\n}\nfunction initializeDefaultUsers() {\n    const users = getAllUsers();\n    if (users.length === 0) {\n        const defaultUsers = [\n            {\n                id: \"01\",\n                email: \"admin@marketplace.com\",\n                firstName: \"Admin\",\n                lastName: \"User\",\n                username: \"admin\",\n                userType: \"admin\",\n                isVerified: true,\n                deposit: 0,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: \"02\",\n                email: \"worker1@marketplace.com\",\n                firstName: \"John\",\n                lastName: \"Worker\",\n                username: \"johnworker\",\n                userType: \"user\",\n                isVerified: true,\n                deposit: 0,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: \"03\",\n                email: \"employer1@marketplace.com\",\n                firstName: \"Jane\",\n                lastName: \"Employer\",\n                username: \"janeemployer\",\n                userType: \"user\",\n                isVerified: true,\n                deposit: 100,\n                earning: 0,\n                country: \"United States\",\n                createdAt: new Date().toISOString()\n            }\n        ];\n        defaultUsers.forEach((user)=>saveUserToDatabase(user));\n        console.log(\"[v0] ✅ Initialized default users:\", defaultUsers.map((u)=>`${u.firstName} ${u.lastName} (ID: ${u.id})`));\n    }\n}\n// Mock authentication functions (replace with real API calls when database is connected)\nasync function signIn(email, password) {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 1000));\n    const users = getAllUsers();\n    const user = users.find((u)=>u.email === email);\n    if (!user) {\n        throw new Error(\"Invalid email or password\");\n    }\n    if (user.userType === \"suspended\") {\n        const reason = user.suspensionReason || \"No reason provided\";\n        throw new Error(`Your account has been suspended. Reason: ${reason}`);\n    }\n    if (email === \"admin@marketplace.com\" && password === \"admin123\") {\n        console.log(\"[v0] Admin login successful for:\", user.email);\n        return user;\n    }\n    if (password === \"password123\" || password.length >= 8) {\n        console.log(\"[v0] User login successful for:\", user.email);\n        return user;\n    }\n    throw new Error(\"Invalid email or password\");\n}\nasync function signUp(data) {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 1000));\n    if (!isValidEmail(data.email)) {\n        throw new Error(\"Please enter a valid email address\");\n    }\n    if (data.password.length < 8) {\n        throw new Error(\"Password must be at least 8 characters long\");\n    }\n    if (!isValidPassword(data.password)) {\n        throw new Error(\"Password must contain at least one uppercase letter, one lowercase letter, and one number\");\n    }\n    if (data.username.length < 3) {\n        throw new Error(\"Username must be at least 3 characters long\");\n    }\n    if (!/^[a-zA-Z0-9_]+$/.test(data.username)) {\n        throw new Error(\"Username can only contain letters, numbers, and underscores\");\n    }\n    const users = getAllUsers();\n    const existingUser = users.find((u)=>u.email === data.email || u.username === data.username);\n    if (existingUser) {\n        if (existingUser.email === data.email) {\n            throw new Error(\"An account with this email already exists\");\n        } else {\n            throw new Error(\"This username is already taken\");\n        }\n    }\n    const newUser = {\n        id: getNextUserId(),\n        email: data.email,\n        firstName: data.firstName,\n        lastName: data.lastName,\n        username: data.username,\n        userType: \"user\",\n        isVerified: false,\n        deposit: 0,\n        earning: 0,\n        country: \"United States\",\n        createdAt: new Date().toISOString()\n    };\n    saveUserToDatabase(newUser);\n    return newUser;\n}\nasync function signOut() {\n    // Simulate API call\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n}\nfunction getStoredUser() {\n    if (true) return null;\n    const stored = localStorage.getItem(\"user\");\n    return stored ? JSON.parse(stored) : null;\n}\nfunction storeUser(user) {\n    if (true) return;\n    localStorage.setItem(\"user\", JSON.stringify(user));\n}\nfunction clearStoredUser() {\n    if (true) return;\n    localStorage.removeItem(\"user\");\n}\nfunction isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n}\nfunction isValidPassword(password) {\n    // At least 8 characters, one uppercase, one lowercase, one number\n    const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n    return passwordRegex.test(password);\n}\nfunction updateUser(userId, updates) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        ...updates\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction toggleUserSuspension(userId) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const user = users[userIndex];\n    // Toggle between user and suspended status (using a custom field)\n    const updatedUser = {\n        ...user,\n        isSuspended: !user.isSuspended\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction suspendUserWithReason(userId, reason, suspendedBy) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        userType: \"suspended\",\n        suspensionReason: reason,\n        suspendedAt: new Date().toISOString(),\n        suspendedBy: suspendedBy\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nfunction activateUser(userId) {\n    const users = getAllUsers();\n    const userIndex = users.findIndex((u)=>u.id === userId);\n    if (userIndex === -1) {\n        throw new Error(\"User not found\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        userType: \"user\",\n        suspensionReason: undefined,\n        suspendedAt: undefined,\n        suspendedBy: undefined\n    };\n    users[userIndex] = updatedUser;\n    localStorage.setItem(\"users_database\", JSON.stringify(users));\n    return updatedUser;\n}\nasync function getUser() {\n    // In a real implementation, this would validate JWT tokens or session cookies\n    // For now, we'll simulate getting the current user from localStorage on the client\n    // or return null on the server (since we don't have real session management)\n    if (true) {\n        // Server-side: In a real app, you'd validate session tokens here\n        // For demo purposes, return a mock admin user for API calls\n        return {\n            id: \"01\",\n            email: \"admin@marketplace.com\",\n            firstName: \"Admin\",\n            lastName: \"User\",\n            username: \"admin\",\n            userType: \"admin\",\n            isVerified: true,\n            deposit: 0,\n            earning: 0,\n            country: \"United States\",\n            createdAt: new Date().toISOString()\n        };\n    }\n    // Client-side: Get user from localStorage\n    return getStoredUser();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/auth.ts\n");

/***/ }),

/***/ "(ssr)/./lib/jobs.ts":
/*!*********************!*\
  !*** ./lib/jobs.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JOB_STATUS: () => (/* binding */ JOB_STATUS),\n/* harmony export */   acceptJobApplication: () => (/* binding */ acceptJobApplication),\n/* harmony export */   applyToJob: () => (/* binding */ applyToJob),\n/* harmony export */   approveJob: () => (/* binding */ approveJob),\n/* harmony export */   canApplyToJob: () => (/* binding */ canApplyToJob),\n/* harmony export */   cancelJob: () => (/* binding */ cancelJob),\n/* harmony export */   createJob: () => (/* binding */ createJob),\n/* harmony export */   getAllJobStatusHistory: () => (/* binding */ getAllJobStatusHistory),\n/* harmony export */   getAllJobs: () => (/* binding */ getAllJobs),\n/* harmony export */   getAllUserJobs: () => (/* binding */ getAllUserJobs),\n/* harmony export */   getApprovedJobs: () => (/* binding */ getApprovedJobs),\n/* harmony export */   getAvailableJobs: () => (/* binding */ getAvailableJobs),\n/* harmony export */   getJobApplicationById: () => (/* binding */ getJobApplicationById),\n/* harmony export */   getJobApplications: () => (/* binding */ getJobApplications),\n/* harmony export */   getJobById: () => (/* binding */ getJobById),\n/* harmony export */   getJobStatusColor: () => (/* binding */ getJobStatusColor),\n/* harmony export */   getJobStatusHistory: () => (/* binding */ getJobStatusHistory),\n/* harmony export */   getJobStatusLabel: () => (/* binding */ getJobStatusLabel),\n/* harmony export */   getJobs: () => (/* binding */ getJobs),\n/* harmony export */   getJobsForDashboard: () => (/* binding */ getJobsForDashboard),\n/* harmony export */   getPendingJobs: () => (/* binding */ getPendingJobs),\n/* harmony export */   getStoredJobs: () => (/* binding */ getStoredJobs),\n/* harmony export */   getUserApplications: () => (/* binding */ getUserApplications),\n/* harmony export */   getUserJobs: () => (/* binding */ getUserJobs),\n/* harmony export */   getWorkProofs: () => (/* binding */ getWorkProofs),\n/* harmony export */   getWorkProofsByJob: () => (/* binding */ getWorkProofsByJob),\n/* harmony export */   getWorkProofsByWorker: () => (/* binding */ getWorkProofsByWorker),\n/* harmony export */   isJobVisible: () => (/* binding */ isJobVisible),\n/* harmony export */   pauseJob: () => (/* binding */ pauseJob),\n/* harmony export */   reactivateJob: () => (/* binding */ reactivateJob),\n/* harmony export */   rejectJob: () => (/* binding */ rejectJob),\n/* harmony export */   rejectJobApplication: () => (/* binding */ rejectJobApplication),\n/* harmony export */   reviewWorkProof: () => (/* binding */ reviewWorkProof),\n/* harmony export */   submitJobApplication: () => (/* binding */ submitJobApplication),\n/* harmony export */   submitJobForApproval: () => (/* binding */ submitJobForApproval),\n/* harmony export */   submitWorkProof: () => (/* binding */ submitWorkProof),\n/* harmony export */   suspendJob: () => (/* binding */ suspendJob),\n/* harmony export */   toggleJobOff: () => (/* binding */ toggleJobOff),\n/* harmony export */   toggleJobOn: () => (/* binding */ toggleJobOn),\n/* harmony export */   updateJob: () => (/* binding */ updateJob),\n/* harmony export */   updateJobStatus: () => (/* binding */ updateJobStatus),\n/* harmony export */   updateJobWorkers: () => (/* binding */ updateJobWorkers)\n/* harmony export */ });\n/* harmony import */ var _categories__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./categories */ \"(ssr)/./lib/categories.ts\");\n/* harmony import */ var _platform_fee__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./platform-fee */ \"(ssr)/./lib/platform-fee.ts\");\n/* harmony import */ var _local_reservation_storage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./local-reservation-storage */ \"(ssr)/./lib/local-reservation-storage.ts\");\n/* harmony import */ var _auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./auth */ \"(ssr)/./lib/auth.ts\");\n// Job-related types and mock data\nconst JOBS_STORAGE_KEY = \"marketplace-jobs\";\nconst APPLICATIONS_STORAGE_KEY = \"marketplace-applications\";\nconst WORK_PROOFS_STORAGE_KEY = \"marketplace-work-proofs\";\nconst JOB_REVIEWS_STORAGE_KEY = \"marketplace-job-reviews\";\nconst JOB_STATUS_HISTORY_STORAGE_KEY = \"marketplace-job-status-history\";\nconst getStoredJobs = ()=>{\n    if (true) return [];\n    try {\n        const stored = localStorage.getItem(JOBS_STORAGE_KEY);\n        if (stored) {\n            const jobs = JSON.parse(stored);\n            return jobs;\n        }\n        return [];\n    } catch  {\n        return [];\n    }\n};\nconst saveJobs = (jobs)=>{\n    if (true) return;\n    try {\n        localStorage.setItem(JOBS_STORAGE_KEY, JSON.stringify(jobs));\n    } catch (error) {\n        console.error(\"Failed to save jobs:\", error);\n    }\n};\nconst getStoredApplications = ()=>{\n    if (true) return [];\n    try {\n        const stored = localStorage.getItem(APPLICATIONS_STORAGE_KEY);\n        return stored ? JSON.parse(stored) : [];\n    } catch  {\n        return [];\n    }\n};\nconst saveApplications = (applications)=>{\n    if (true) return;\n    try {\n        localStorage.setItem(APPLICATIONS_STORAGE_KEY, JSON.stringify(applications));\n    } catch (error) {\n        console.error(\"Failed to save applications:\", error);\n    }\n};\nconst getStoredWorkProofs = ()=>{\n    if (true) return [];\n    try {\n        const stored = localStorage.getItem(WORK_PROOFS_STORAGE_KEY);\n        return stored ? JSON.parse(stored) : [];\n    } catch  {\n        return [];\n    }\n};\nconst saveWorkProofs = (workProofs)=>{\n    if (true) return;\n    try {\n        localStorage.setItem(WORK_PROOFS_STORAGE_KEY, JSON.stringify(workProofs));\n    } catch (error) {\n        console.error(\"Failed to save work proofs:\", error);\n    }\n};\nconst getStoredJobReviews = ()=>{\n    if (true) return [];\n    try {\n        const stored = localStorage.getItem(JOB_REVIEWS_STORAGE_KEY);\n        return stored ? JSON.parse(stored) : [];\n    } catch  {\n        return [];\n    }\n};\nconst saveJobReviews = (reviews)=>{\n    if (true) return;\n    try {\n        localStorage.setItem(JOB_REVIEWS_STORAGE_KEY, JSON.stringify(reviews));\n    } catch (error) {\n        console.error(\"Failed to save job reviews:\", error);\n    }\n};\n// Storage functions for job status history\nconst getStoredJobStatusHistory = ()=>{\n    if (true) return [];\n    try {\n        const stored = localStorage.getItem(JOB_STATUS_HISTORY_STORAGE_KEY);\n        return stored ? JSON.parse(stored) : [];\n    } catch  {\n        return [];\n    }\n};\nconst saveJobStatusHistory = (history)=>{\n    if (true) return;\n    try {\n        localStorage.setItem(JOB_STATUS_HISTORY_STORAGE_KEY, JSON.stringify(history));\n    } catch (error) {\n        console.error(\"Failed to save job status history:\", error);\n    }\n};\n// Function to record status changes\nconst recordStatusChange = (jobId, oldStatus, newStatus, userId, notes, metadata)=>{\n    const history = getStoredJobStatusHistory();\n    const statusEntry = {\n        id: `status_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        jobId,\n        userId,\n        oldStatus,\n        newStatus,\n        notes,\n        metadata,\n        createdAt: new Date().toISOString()\n    };\n    history.push(statusEntry);\n    saveJobStatusHistory(history);\n    console.log(`[v0] Status change recorded for job ${jobId}: ${oldStatus} -> ${newStatus}`);\n};\n\n\n\nasync function populateJobCategoryData(job) {\n    console.log(\"[v0] Populating category data for job:\", job.title, \"categoryId:\", job.categoryId, \"subcategoryId:\", job.subcategoryId);\n    const populatedJob = {\n        ...job\n    };\n    if (!populatedJob.category?.thumbnail && populatedJob.categoryId) {\n        const fullCategory = await (0,_categories__WEBPACK_IMPORTED_MODULE_0__.getCategoryById)(populatedJob.categoryId);\n        console.log(\"[v0] Loaded category:\", fullCategory?.name, \"thumbnail:\", fullCategory?.thumbnail);\n        if (fullCategory) {\n            populatedJob.category = {\n                id: fullCategory.id,\n                name: fullCategory.name,\n                slug: fullCategory.slug,\n                thumbnail: fullCategory.thumbnail\n            };\n            populatedJob.categoryThumbnail = fullCategory.thumbnail;\n        }\n    }\n    // Load subcategory data if subcategoryId exists\n    if (populatedJob.subcategoryId) {\n        const subcategory = await (0,_categories__WEBPACK_IMPORTED_MODULE_0__.getSubcategoryById)(populatedJob.subcategoryId);\n        console.log(\"[v0] Loaded subcategory:\", subcategory?.name, \"thumbnail:\", subcategory?.thumbnail);\n        if (subcategory) {\n            populatedJob.subcategory = subcategory;\n        }\n    }\n    console.log(\"[v0] Final job data:\", {\n        title: populatedJob.title,\n        categoryThumbnail: populatedJob.categoryThumbnail,\n        subcategory: populatedJob.subcategory?.name,\n        subcategoryThumbnail: populatedJob.subcategory?.thumbnail\n    });\n    return populatedJob;\n}\nasync function getJobs(filters) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    let filteredJobs = getStoredJobs().filter((job)=>job.status === \"approved\" || job.status === \"open\");\n    if (filters?.search) {\n        filteredJobs = filteredJobs.filter((job)=>job.title.toLowerCase().includes(filters.search.toLowerCase()) || job.description.toLowerCase().includes(filters.search.toLowerCase()) || job.skillsRequired.some((skill)=>skill.toLowerCase().includes(filters.search.toLowerCase())));\n    }\n    if (filters?.category) {\n        filteredJobs = filteredJobs.filter((job)=>job.category.slug === filters.category);\n    }\n    if (filters?.remote !== undefined) {\n        filteredJobs = filteredJobs.filter((job)=>job.isRemote === filters.remote);\n    }\n    if (filters?.budget) {\n        filteredJobs = filteredJobs.filter((job)=>job.budgetMax >= filters.budget.min && job.budgetMin <= filters.budget.max);\n    }\n    if (filters?.location && filters.location !== \"all\") {\n        filteredJobs = filteredJobs.filter((job)=>job.location.toLowerCase().includes(filters.location.toLowerCase()));\n    }\n    const sortedJobs = filteredJobs.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n    const populatedJobs = await Promise.all(sortedJobs.map(populateJobCategoryData));\n    return populatedJobs;\n}\nasync function getJobById(id) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const job = jobs.find((job)=>job.id === id);\n    if (job) {\n        // Increment view count\n        job.viewsCount = (job.viewsCount || 0) + 1;\n        const jobIndex = jobs.findIndex((j)=>j.id === id);\n        if (jobIndex !== -1) {\n            jobs[jobIndex] = job;\n            saveJobs(jobs);\n        }\n        const { getAllUsers } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./auth */ \"(ssr)/./lib/auth.ts\"));\n        const users = getAllUsers();\n        const posterUser = users.find((u)=>u.id === job.userId);\n        if (posterUser) {\n            job.poster = {\n                id: posterUser.id,\n                firstName: posterUser.firstName,\n                lastName: posterUser.lastName,\n                username: posterUser.username,\n                avatar: posterUser.avatar,\n                rating: 4.5,\n                totalReviews: 0\n            };\n        }\n        return await populateJobCategoryData(job);\n    }\n    return null;\n}\nasync function getJobApplications(jobId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const applications = getStoredApplications();\n    return applications.filter((app)=>app.jobId === jobId);\n}\nasync function submitJobApplication(data) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    if (!data.userId) {\n        throw new Error(\"User ID is required to submit application\");\n    }\n    if (!data.coverLetter.trim()) {\n        throw new Error(\"Cover letter is required\");\n    }\n    if (data.proposedBudget <= 0) {\n        throw new Error(\"Proposed budget must be greater than 0\");\n    }\n    // Check if user already applied\n    const existingApplications = getStoredApplications();\n    const hasApplied = existingApplications.some((app)=>app.jobId === data.jobId && app.applicantId === data.userId);\n    if (hasApplied) {\n        throw new Error(\"You have already applied to this job\");\n    }\n    // Get user data for application\n    const { getAllUsers } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./auth */ \"(ssr)/./lib/auth.ts\"));\n    const users = getAllUsers();\n    const user = users.find((u)=>u.id === data.userId);\n    if (!user) {\n        throw new Error(\"User not found\");\n    }\n    const newApplication = {\n        id: `app_${Date.now()}`,\n        jobId: data.jobId,\n        applicantId: data.userId,\n        coverLetter: data.coverLetter,\n        proposedBudget: data.proposedBudget,\n        estimatedDuration: data.estimatedDuration,\n        portfolioLinks: data.portfolioLinks,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n        applicant: {\n            id: user.id,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            username: user.username,\n            rating: 4.5,\n            totalReviews: 0,\n            skills: [\n                \"General\"\n            ]\n        }\n    };\n    const applications = getStoredApplications();\n    applications.push(newApplication);\n    saveApplications(applications);\n    // Update job application count\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === data.jobId);\n    if (jobIndex !== -1) {\n        jobs[jobIndex].applicationsCount = (jobs[jobIndex].applicationsCount || 0) + 1;\n        saveJobs(jobs);\n    }\n    // Create notification for job poster\n    const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n    const job = jobs.find((j)=>j.id === data.jobId);\n    if (job) {\n        await createNotification({\n            userId: job.userId,\n            type: \"job\",\n            title: \"New Job Application\",\n            description: `${user.firstName} ${user.lastName} applied for your job \"${job.title}\"`,\n            actionUrl: `/dashboard/jobs/${job.id}/applications`\n        });\n    }\n    return newApplication;\n}\nasync function submitJobForApproval(jobData, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    if (!userId) {\n        throw new Error(\"User ID is required to submit job\");\n    }\n    if (!jobData.title?.trim()) {\n        throw new Error(\"Job title is required\");\n    }\n    if (!jobData.description?.trim()) {\n        throw new Error(\"Job description is required\");\n    }\n    if (!jobData.budgetMin || jobData.budgetMin <= 0) {\n        throw new Error(\"Valid budget is required\");\n    }\n    const { getAllUsers } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./auth */ \"(ssr)/./lib/auth.ts\"));\n    const users = getAllUsers();\n    const user = users.find((u)=>u.id === userId);\n    if (!user) {\n        throw new Error(\"User not found\");\n    }\n    const { getCategoryById } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./categories */ \"(ssr)/./lib/categories.ts\"));\n    const category = await getCategoryById(jobData.categoryId || \"\");\n    const { getSubcategoryById } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./categories */ \"(ssr)/./lib/categories.ts\"));\n    const subcategory = jobData.subcategoryId ? await getSubcategoryById(jobData.subcategoryId) : null;\n    const checkAutoJobApproval = ()=>{\n        console.log(\"[v0] 🔧 AUTO-APPROVAL CHECK: Starting auto-approval check...\");\n        // For server-side execution, we need to pass the setting from client\n        // Default to MANUAL APPROVAL (false) for security\n        let autoApprovalSetting = false;\n        try {\n            // Check if we're in browser environment\n            if (false) {} else {\n                console.log(\"[v0] 🔧 AUTO-APPROVAL CHECK: Server-side execution - defaulting to MANUAL APPROVAL\");\n                autoApprovalSetting = false;\n            }\n        } catch (error) {\n            console.error(\"[v0] 🔧 AUTO-APPROVAL CHECK: Error accessing localStorage:\", error);\n            autoApprovalSetting = false;\n        }\n        console.log(\"[v0] 🔧 AUTO-APPROVAL CHECK: Final decision:\", autoApprovalSetting ? \"AUTO-APPROVE\" : \"MANUAL APPROVAL\");\n        return autoApprovalSetting;\n    };\n    const shouldAutoApprove = checkAutoJobApproval();\n    const jobStatus = shouldAutoApprove ? \"approved\" : \"pending\";\n    console.log(\"[v0] 💼 JOB CREATION: Starting job creation process\");\n    console.log(\"[v0] 💼 JOB CREATION: Auto-approval enabled:\", shouldAutoApprove);\n    console.log(\"[v0] 💼 JOB CREATION: Job status will be:\", jobStatus);\n    console.log(\"[v0] 💼 JOB CREATION: Job title:\", jobData.title);\n    const newJob = {\n        id: `job_${Date.now()}`,\n        userId,\n        categoryId: jobData.categoryId || \"\",\n        subcategoryId: jobData.subcategoryId,\n        title: jobData.title,\n        description: jobData.description,\n        requirements: jobData.requirements,\n        instructions: jobData.instructions,\n        budgetMin: jobData.budgetMin,\n        budgetMax: jobData.budgetMax || jobData.budgetMin,\n        deadline: jobData.deadline || new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split(\"T\")[0],\n        location: jobData.location || \"Remote\",\n        isRemote: jobData.isRemote ?? true,\n        status: jobStatus,\n        priority: jobData.priority || \"normal\",\n        skillsRequired: jobData.skillsRequired || [],\n        applicationsCount: 0,\n        viewsCount: 0,\n        workersNeeded: jobData.workersNeeded || 1,\n        duration: jobData.duration,\n        durationType: jobData.durationType,\n        tags: jobData.tags || [],\n        attachments: jobData.attachments || [],\n        requireScreenshots: jobData.requireScreenshots || 0,\n        screenshotCost: (jobData.requireScreenshots || 0) * 0.05,\n        estimatedApprovalDays: jobData.estimatedApprovalDays || 1,\n        requiredProof: jobData.requirements,\n        submittedAt: new Date().toISOString(),\n        approvedAt: shouldAutoApprove ? new Date().toISOString() : undefined,\n        approvedBy: shouldAutoApprove ? \"System (Auto-approval)\" : undefined,\n        approvalReason: shouldAutoApprove ? \"Automatically approved - Auto-approval is enabled\" : undefined,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        category: category || {\n            id: jobData.categoryId || \"\",\n            name: \"General\",\n            slug: \"general\"\n        },\n        subcategory: subcategory ? {\n            id: subcategory.id,\n            name: subcategory.name,\n            slug: subcategory.slug,\n            thumbnail: subcategory.thumbnail\n        } : undefined,\n        poster: {\n            id: user.id,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            username: user.username,\n            rating: 4.5,\n            totalReviews: 0\n        }\n    };\n    const jobs = getStoredJobs();\n    jobs.push(newJob);\n    saveJobs(jobs);\n    const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n    await createNotification({\n        userId,\n        type: \"job\",\n        title: shouldAutoApprove ? \"Job Approved\" : \"Job Submitted for Review\",\n        description: shouldAutoApprove ? `Your job \"${newJob.title}\" has been automatically approved and is now live` : `Your job \"${newJob.title}\" has been submitted and is pending admin review`,\n        actionUrl: `/dashboard/jobs`\n    });\n    console.log(\"[v0] ✅ JOB CREATION: Job created successfully with ID:\", newJob.id);\n    console.log(\"[v0] ✅ JOB CREATION: Final job status:\", newJob.status);\n    console.log(\"[v0] ✅ JOB CREATION: Auto-approved:\", shouldAutoApprove);\n    return newJob;\n}\nasync function approveJob(jobId, adminId, reason) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId);\n    if (jobIndex === -1) throw new Error(\"Job not found\");\n    const oldStatus = jobs[jobIndex].status;\n    const updatedJob = await updateJobStatus(jobId, \"approved\", adminId, reason);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"open\", adminId, reason || \"Job approved by admin\", {\n        reviewId: `review-${Date.now()}`,\n        decision: \"accepted\",\n        feedback: reason\n    });\n    return updatedJob;\n}\nasync function rejectJob(jobId, adminId, reason) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId);\n    if (jobIndex === -1) throw new Error(\"Job not found\");\n    const oldStatus = jobs[jobIndex].status;\n    const updatedJob = await updateJobStatus(jobId, \"rejected\", adminId, reason);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"rejected\", adminId, reason, {\n        reviewId: `review-${Date.now()}`,\n        decision: \"rejected\",\n        feedback: reason\n    });\n    return updatedJob;\n}\nasync function suspendJob(jobId, adminId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId);\n    if (jobIndex === -1) throw new Error(\"Job not found\");\n    const oldStatus = jobs[jobIndex].status;\n    const updatedJob = await updateJobStatus(jobId, \"suspended\", adminId);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"suspended\", adminId, \"Job suspended by admin\", {\n        reviewId: `review-${Date.now()}`,\n        decision: \"revision_requested\",\n        feedback: \"Job suspended by admin\"\n    });\n    return updatedJob;\n}\nasync function getPendingJobs() {\n    const jobs = getStoredJobs();\n    return jobs.filter((job)=>job.status === \"pending\");\n}\nasync function getApprovedJobs() {\n    const jobs = getStoredJobs();\n    return jobs.filter((job)=>job.status === \"approved\" || job.status === \"open\");\n}\nasync function getAllJobs() {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const populatedJobs = await Promise.all(jobs.map(populateJobCategoryData));\n    return populatedJobs;\n}\nasync function getAllUserJobs(userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    return jobs.filter((job)=>job.userId === userId);\n}\nasync function updateJob(jobId, updates) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId);\n    if (jobIndex === -1) throw new Error(\"Job not found\");\n    const updatedJob = {\n        ...jobs[jobIndex],\n        ...updates,\n        updatedAt: new Date().toISOString(),\n        // If job is edited, it needs re-approval\n        status: updates.status || \"pending\"\n    };\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    return updatedJob;\n}\nasync function cancelJob(jobId, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId && j.userId === userId);\n    if (jobIndex === -1) throw new Error(\"Job not found or unauthorized\");\n    const job = jobs[jobIndex];\n    const oldStatus = job.status;\n    // Get work proofs to see how many workers have submitted work\n    const workProofs = getStoredWorkProofs().filter((wp)=>wp.jobId === jobId);\n    const submittedWorkCount = workProofs.length;\n    const remainingSlots = job.workersNeeded - submittedWorkCount;\n    const jobCostPerWorker = job.budgetMax;\n    const platformFeePerWorker = jobCostPerWorker * 0.05;\n    const totalCostPerWorker = jobCostPerWorker + platformFeePerWorker;\n    const refundAmount = remainingSlots > 0 ? remainingSlots * totalCostPerWorker : 0;\n    if (refundAmount > 0) {\n        try {\n            const { addWalletTransaction } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n            await addWalletTransaction({\n                userId,\n                type: \"refund\",\n                amount: refundAmount,\n                description: `Refund for cancelled job: \"${job.title}\" (Job #${job.formattedJobId || job.id}) - ${remainingSlots} remaining slots + platform fees`,\n                referenceId: jobId,\n                referenceType: \"job_cancellation\",\n                balanceType: \"deposit\"\n            });\n            console.log(`[v0] ✅ Job cancellation refund processed: $${refundAmount}`);\n        } catch (error) {\n            if (error instanceof Error && error.message.includes(\"already exists\")) {\n                console.log(`[v0] ⚠️ Job cancellation refund already processed for job: ${jobId}`);\n            } else {\n                console.error(`[v0] ❌ Failed to process job cancellation refund:`, error);\n                throw error;\n            }\n        }\n    }\n    // Update job status to cancelled but keep it accessible for submitted work review\n    const updatedJob = {\n        ...job,\n        status: \"cancelled\",\n        updatedAt: new Date().toISOString(),\n        cancellationDetails: {\n            cancelledAt: new Date().toISOString(),\n            submittedWorkCount,\n            remainingSlots,\n            refundAmount,\n            canReviewSubmissions: submittedWorkCount > 0\n        }\n    };\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"cancelled\", userId, `Job cancelled. ${submittedWorkCount} work submissions can still be reviewed. ${remainingSlots} slots refunded including platform fee.`, {\n        userAction: \"cancel\",\n        submittedWorkCount,\n        remainingSlots,\n        refundAmount,\n        canReviewSubmissions: submittedWorkCount > 0\n    });\n    console.log(`[v0] Job ${jobId} cancelled. Refund: $${refundAmount} (including platform fee), Submitted work: ${submittedWorkCount}`);\n    return {\n        job: updatedJob,\n        refundAmount\n    };\n}\nasync function pauseJob(jobId, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId && j.userId === userId);\n    if (jobIndex === -1) throw new Error(\"Job not found or unauthorized\");\n    const oldStatus = jobs[jobIndex].status;\n    const updatedJob = await updateJobStatus(jobId, \"suspended\", userId);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"suspended\", userId, \"Job paused by owner\", {\n        userAction: \"pause\"\n    });\n    return updatedJob;\n}\nasync function reactivateJob(jobId, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId && j.userId === userId);\n    if (jobIndex === -1) throw new Error(\"Job not found or unauthorized\");\n    const oldStatus = jobs[jobIndex].status;\n    // Reactivated jobs need re-approval\n    const updatedJob = await updateJobStatus(jobId, \"pending\", userId);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"pending\", userId, \"Job reactivated and resubmitted for approval\", {\n        userAction: \"reactivate\"\n    });\n    return updatedJob;\n}\nasync function getUserApplications(userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const applications = getStoredApplications();\n    const jobs = getStoredJobs();\n    // Filter applications by user and add job details\n    const userApplications = applications.filter((app)=>app.applicantId === userId).map((app)=>{\n        const job = jobs.find((j)=>j.id === app.jobId);\n        return {\n            ...app,\n            job: job || null,\n            appliedAt: app.createdAt\n        };\n    });\n    return userApplications;\n}\n\nasync function submitWorkProof(data) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    console.log(\"[v0] 📝 WORK PROOF: Starting work proof submission\");\n    console.log(\"[v0] 📝 WORK PROOF: Job ID:\", data.jobId);\n    console.log(\"[v0] 📝 WORK PROOF: Worker ID:\", data.workerId);\n    const users = (0,_auth__WEBPACK_IMPORTED_MODULE_3__.getAllUsers)();\n    const workerUser = users.find((u)=>u.id === data.workerId);\n    console.log(\"[v0] 👤 Found worker user:\", workerUser?.firstName, workerUser?.lastName, workerUser?.username);\n    // Get job details to check approval type\n    const jobs = getStoredJobs();\n    const job = jobs.find((j)=>j.id === data.jobId);\n    if (!job) {\n        throw new Error(\"Job not found\");\n    }\n    console.log(\"[v0] 📝 WORK PROOF: Job approval type:\", job.approvalType);\n    console.log(\"[v0] 📝 WORK PROOF: Instant approval enabled:\", job.isInstantApprovalEnabled);\n    // Get application details\n    const applications = getStoredApplications();\n    const application = applications.find((app)=>app.id === data.applicationId);\n    if (!application) {\n        throw new Error(\"Application not found\");\n    }\n    const paymentAmount = application.proposedBudget || job.budgetMax || job.budgetMin;\n    const shouldProcessInstantPayment = job.approvalType === \"instant\" && job.isInstantApprovalEnabled === true;\n    console.log(\"[v0] 📝 WORK PROOF: Should process instant payment:\", shouldProcessInstantPayment);\n    console.log(\"[v0] 📝 WORK PROOF: Payment amount:\", paymentAmount);\n    const newProof = {\n        id: Date.now().toString(),\n        jobId: data.jobId,\n        applicationId: data.applicationId,\n        workerId: data.workerId,\n        employerId: job.userId,\n        title: data.title,\n        description: data.description,\n        submissionText: data.submissionText,\n        proofFiles: data.proofFiles || [],\n        proofLinks: data.proofLinks || [],\n        screenshots: data.screenshots || [],\n        attachments: data.attachments || [],\n        status: shouldProcessInstantPayment ? \"approved\" : \"submitted\",\n        submittedAt: new Date().toISOString(),\n        approvedAt: shouldProcessInstantPayment ? new Date().toISOString() : undefined,\n        paymentAmount,\n        submissionNumber: 1,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        worker: {\n            id: data.workerId,\n            firstName: workerUser?.firstName || \"Unknown\",\n            lastName: workerUser?.lastName || \"Worker\",\n            username: workerUser?.username || `user${data.workerId}`,\n            avatar: workerUser?.avatar\n        },\n        employer: {\n            id: job.userId,\n            firstName: users.find((u)=>u.id === job.userId)?.firstName || \"Job\",\n            lastName: users.find((u)=>u.id === job.userId)?.lastName || \"Poster\",\n            username: users.find((u)=>u.id === job.userId)?.username || \"jobposter\"\n        }\n    };\n    if (shouldProcessInstantPayment) {\n        try {\n            console.log(\"[v0] 💰 INSTANT PAYMENT: Processing instant payment for work proof\");\n            const { addWalletTransaction } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n            // Calculate platform fee (5% default)\n            const platformFeeSettings = await (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.getPlatformFeeSettings)();\n            let platformFeeRate = 0.05 // Default fallback\n            ;\n            let platformFee = 0;\n            if (platformFeeSettings) {\n                const feeCalculation = (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.calculatePlatformFee)(paymentAmount, platformFeeSettings);\n                platformFee = feeCalculation.platformFee;\n                platformFeeRate = platformFeeSettings.feePercentage / 100;\n            } else {\n                platformFee = Math.round(paymentAmount * platformFeeRate * 100) / 100;\n            }\n            const workerAmount = Math.round((paymentAmount - platformFee) * 100) / 100;\n            console.log(\"[v0] 💰 INSTANT PAYMENT: Total amount:\", paymentAmount);\n            console.log(\"[v0] 💰 INSTANT PAYMENT: Platform fee:\", platformFee);\n            console.log(\"[v0] 💰 INSTANT PAYMENT: Worker receives:\", workerAmount);\n            // Add money to worker's withdrawal balance\n            await addWalletTransaction({\n                userId: data.workerId,\n                type: \"job_payment\",\n                amount: workerAmount,\n                description: `Instant payment for job: ${job.title}`,\n                referenceId: data.jobId,\n                referenceType: \"job_payment\",\n                balanceType: \"withdrawal\"\n            });\n            // Record platform fee\n            await addWalletTransaction({\n                userId: \"platform\",\n                type: \"platform_fee\",\n                amount: platformFee,\n                description: `Platform fee for job: ${job.title}`,\n                referenceId: data.jobId,\n                referenceType: \"platform_fee\",\n                balanceType: \"withdrawal\"\n            });\n            newProof.approvedAt = new Date().toISOString();\n            newProof.approvedBy = \"System (Instant Approval)\";\n            newProof.paymentProcessedAt = new Date().toISOString();\n            console.log(\"[v0] ✅ INSTANT PAYMENT: Payment processed successfully\");\n            // Create notification for worker\n            const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n            await createNotification({\n                userId: data.workerId,\n                type: \"payment\",\n                title: \"Instant Payment Received! 💰\",\n                description: `You received $${workerAmount.toFixed(2)} for completing \"${job.title}\". Payment has been added to your withdrawal balance.`,\n                actionUrl: `/dashboard/wallet`\n            });\n            // Create notification for employer\n            await createNotification({\n                userId: job.userId,\n                type: \"job\",\n                title: \"Work Submitted & Payment Released\",\n                description: `Work has been submitted for \"${job.title}\" and instant payment of $${paymentAmount.toFixed(2)} has been released to the worker.`,\n                actionUrl: `/dashboard/jobs/${data.jobId}`\n            });\n            console.log(\"[v0] ✅ INSTANT PAYMENT: Notifications sent successfully\");\n        } catch (error) {\n            console.error(\"[v0] ❌ INSTANT PAYMENT: Error processing instant payment:\", error);\n            // Don't fail the work proof submission, just log the error\n            newProof.status = \"submitted\";\n            newProof.paymentError = error.message;\n        }\n    } else {\n        console.log(\"[v0] 📝 WORK PROOF: Manual approval required, creating notification for employer\");\n        const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n        await createNotification({\n            userId: job.userId,\n            type: \"job\",\n            title: \"Work Submitted for Review\",\n            description: `Work has been submitted for \"${job.title}\". Please review and approve within ${job.manualApprovalDays || 3} days.`,\n            actionUrl: `/dashboard/jobs/${data.jobId}`\n        });\n    }\n    const workProofs = getStoredWorkProofs();\n    workProofs.push(newProof);\n    saveWorkProofs(workProofs);\n    console.log(\"[v0] ✅ WORK PROOF: Work proof saved successfully with status:\", newProof.status);\n    return newProof;\n}\nasync function getWorkProofsByJob(jobId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const workProofs = getStoredWorkProofs();\n    return workProofs.filter((proof)=>proof.jobId === jobId);\n}\nasync function getWorkProofsByWorker(workerId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const workProofs = getStoredWorkProofs();\n    return workProofs.filter((proof)=>proof.workerId === workerId);\n}\nasync function getWorkProofs(jobId) {\n    return await getWorkProofsByJob(jobId);\n}\nasync function reviewWorkProof(proofId, reviewData) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    const workProofs = getStoredWorkProofs();\n    const proofIndex = workProofs.findIndex((proof)=>proof.id === proofId);\n    if (proofIndex === -1) {\n        throw new Error(\"Work proof not found\");\n    }\n    const proof = workProofs[proofIndex];\n    // Update proof status\n    workProofs[proofIndex] = {\n        ...proof,\n        status: reviewData.decision === \"accepted\" ? \"accepted\" : reviewData.decision === \"rejected\" ? \"rejected\" : \"revision_requested\",\n        updatedAt: new Date().toISOString()\n    };\n    saveWorkProofs(workProofs);\n    // Create review record\n    const review = {\n        id: `review-${Date.now()}`,\n        jobId: proof.jobId,\n        proofId: proofId,\n        reviewerId: reviewData.reviewerId,\n        decision: reviewData.decision,\n        feedback: reviewData.feedback,\n        revisionNotes: reviewData.revisionNotes,\n        reviewedAt: new Date().toISOString()\n    };\n    // Store review (in real app, this would go to database)\n    const reviews = getStoredJobReviews();\n    reviews.push(review);\n    saveJobReviews(reviews);\n    // Update job and application status based on decision\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((job)=>job.id === proof.jobId);\n    if (jobIndex !== -1) {\n        const oldStatus = jobs[jobIndex].status;\n        let newStatus = oldStatus;\n        if (reviewData.decision === \"accepted\") {\n            // Update job to completed\n            newStatus = \"completed\";\n            jobs[jobIndex] = {\n                ...jobs[jobIndex],\n                status: \"completed\",\n                updatedAt: new Date().toISOString()\n            };\n            recordStatusChange(proof.jobId, oldStatus, \"completed\", reviewData.reviewerId, \"Work proof accepted - job completed\", {\n                reviewId: review.id,\n                decision: \"accepted\",\n                feedback: reviewData.feedback\n            });\n        } else if (reviewData.decision === \"rejected\") {\n            recordStatusChange(proof.jobId, oldStatus, oldStatus, reviewData.reviewerId, \"Work proof rejected - awaiting rework or dispute\", {\n                reviewId: review.id,\n                decision: \"rejected\",\n                feedback: reviewData.feedback,\n                revisionNotes: reviewData.revisionNotes\n            });\n        } else {\n            recordStatusChange(proof.jobId, oldStatus, oldStatus, reviewData.reviewerId, \"Revision requested on work proof\", {\n                reviewId: review.id,\n                decision: \"revision_requested\",\n                revisionNotes: reviewData.revisionNotes\n            });\n        }\n        saveJobs(jobs);\n        // Update application to completed if accepted\n        if (reviewData.decision === \"accepted\") {\n            const applications = getStoredApplications();\n            const appIndex = applications.findIndex((app)=>app.jobId === proof.jobId && app.applicantId === proof.workerId);\n            if (appIndex !== -1) {\n                applications[appIndex] = {\n                    ...applications[appIndex],\n                    status: \"completed\"\n                };\n                saveApplications(applications);\n            }\n        }\n    }\n    return review;\n}\nasync function getJobApplicationById(applicationId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const applications = getStoredApplications();\n    return applications.find((app)=>app.id === applicationId) || null;\n}\nasync function updateJobStatus(jobId, newStatus, userId, metadata) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((job)=>job.id === jobId);\n    if (jobIndex === -1) throw new Error(\"Job not found\");\n    const job = jobs[jobIndex];\n    const oldStatus = job.status;\n    const updatedJob = {\n        ...job,\n        status: newStatus,\n        updatedAt: new Date().toISOString(),\n        ...newStatus === \"completed\" && {\n            completedAt: new Date().toISOString()\n        }\n    };\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    // Add to status history\n    const statusHistory = getStoredJobStatusHistory();\n    statusHistory.push({\n        id: `status_${Date.now()}`,\n        jobId,\n        userId,\n        oldStatus,\n        newStatus,\n        notes: metadata?.notes || `Status changed from ${oldStatus} to ${newStatus}`,\n        metadata,\n        createdAt: new Date().toISOString()\n    });\n    saveJobStatusHistory(statusHistory);\n    console.log(\"[v0] Job status updated:\", jobId, \"from\", oldStatus, \"to\", newStatus);\n    if (newStatus === \"completed\") {\n        try {\n            const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n            // Notify job poster\n            await createNotification({\n                userId: job.userId,\n                type: \"job\",\n                title: \"Job Completed Successfully\",\n                description: `Your job \"${job.title}\" has been completed by all required workers.`,\n                actionUrl: `/dashboard/jobs/${jobId}`\n            });\n            // If there are multiple workers, notify them all\n            if (metadata?.totalWorkersCompleted && metadata.totalWorkersCompleted > 1) {\n                const { getJobApplications } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./jobs */ \"(ssr)/./lib/jobs.ts\"));\n                const applications = await getJobApplications(jobId);\n                const acceptedWorkers = applications.filter((app)=>app.status === \"accepted\");\n                for (const app of acceptedWorkers){\n                    await createNotification({\n                        userId: app.applicantId,\n                        type: \"job\",\n                        title: \"Job Fully Completed\",\n                        description: `The job \"${job.title}\" has been completed by all required workers.`,\n                        actionUrl: `/dashboard/applied-jobs`\n                    });\n                }\n            }\n        } catch (error) {\n            console.error(\"[v0] Failed to send completion notifications:\", error);\n        }\n    }\n    return updatedJob;\n}\nconst JOB_STATUS = {\n    PENDING: \"pending\",\n    APPROVED: \"approved\",\n    REJECTED: \"rejected\",\n    SUSPENDED: \"suspended\",\n    OPEN: \"open\",\n    IN_PROGRESS: \"in_progress\",\n    COMPLETED: \"completed\",\n    CANCELLED: \"cancelled\"\n};\nconst getJobStatusColor = (status)=>{\n    switch(status){\n        case JOB_STATUS.PENDING:\n            return \"bg-yellow-100 text-yellow-800\";\n        case JOB_STATUS.APPROVED:\n        case JOB_STATUS.OPEN:\n            return \"bg-green-100 text-green-800\";\n        case JOB_STATUS.REJECTED:\n            return \"bg-red-100 text-red-800\";\n        case JOB_STATUS.SUSPENDED:\n            return \"bg-gray-100 text-gray-800\";\n        case JOB_STATUS.IN_PROGRESS:\n            return \"bg-blue-100 text-blue-800\";\n        case JOB_STATUS.COMPLETED:\n            return \"bg-purple-100 text-purple-800\";\n        case JOB_STATUS.CANCELLED:\n            return \"bg-orange-100 text-orange-800\";\n        default:\n            return \"bg-gray-100 text-gray-800\";\n    }\n};\nconst getJobStatusLabel = (status)=>{\n    switch(status){\n        case JOB_STATUS.PENDING:\n            return \"Pending Review\";\n        case JOB_STATUS.APPROVED:\n            return \"Approved\";\n        case JOB_STATUS.REJECTED:\n            return \"Rejected\";\n        case JOB_STATUS.SUSPENDED:\n            return \"Suspended\";\n        case JOB_STATUS.OPEN:\n            return \"Open\";\n        case JOB_STATUS.IN_PROGRESS:\n            return \"In Progress\";\n        case JOB_STATUS.COMPLETED:\n            return \"Completed\";\n        case JOB_STATUS.CANCELLED:\n            return \"Cancelled\";\n        default:\n            return status;\n    }\n};\nconst canApplyToJob = (job)=>{\n    return job.status === JOB_STATUS.APPROVED || job.status === JOB_STATUS.OPEN;\n};\nconst isJobVisible = (job, userType = \"user\")=>{\n    if (userType === \"admin\") {\n        return true // Admins can see all jobs\n        ;\n    }\n    // Regular users can only see approved/open jobs\n    return job.status === JOB_STATUS.APPROVED || job.status === JOB_STATUS.OPEN;\n};\nconst getAvailableJobs = async (currentUserId)=>{\n    const jobs = getStoredJobs();\n    return jobs.filter((job)=>{\n        // Basic status filter - only show approved/open jobs that aren't completed\n        const isValidStatus = (job.status === JOB_STATUS.APPROVED || job.status === JOB_STATUS.OPEN) && job.status !== JOB_STATUS.COMPLETED;\n        if (!isValidStatus) return false;\n        const workersNeeded = job.workersNeeded || job.maxWorkers || 1;\n        const currentApplications = job.applicationsCount || 0;\n        // If job has reached its worker limit, don't show it as available\n        if (currentApplications >= workersNeeded) {\n            console.log(\"[v0] Job\", job.id, \"at capacity:\", currentApplications, \"of\", workersNeeded, \"workers\");\n            return false;\n        }\n        const reservationInfo = _local_reservation_storage__WEBPACK_IMPORTED_MODULE_2__.localReservationStorage.isJobReserved(job.id);\n        // If job is not reserved, show it to everyone\n        if (!reservationInfo.isReserved) return true;\n        // If job needs multiple workers, show it even when reserved (partial reservation)\n        if (job.workersNeeded > 1) return true;\n        // For single-worker jobs that are reserved:\n        // Only show to the user who reserved it, hide from others\n        if (job.workersNeeded === 1 && reservationInfo.isReserved) {\n            return currentUserId === reservationInfo.userId;\n        }\n        return true;\n    });\n};\nconst getJobsForDashboard = (jobs, currentUserId)=>{\n    return jobs.filter((job)=>{\n        // Basic status filter\n        const isValidStatus = (job.status === JOB_STATUS.APPROVED || job.status === JOB_STATUS.OPEN) && job.status !== JOB_STATUS.COMPLETED;\n        if (!isValidStatus) return false;\n        const workersNeeded = job.workersNeeded || job.maxWorkers || 1;\n        const currentApplications = job.applicationsCount || 0;\n        // If job has reached its worker limit, don't show it as available\n        if (currentApplications >= workersNeeded) {\n            console.log(\"[v0] Dashboard job\", job.id, \"at capacity:\", currentApplications, \"of\", workersNeeded, \"workers\");\n            return false;\n        }\n        const reservationInfo = _local_reservation_storage__WEBPACK_IMPORTED_MODULE_2__.localReservationStorage.isJobReserved(job.id);\n        // If job is not reserved, show it to everyone\n        if (!reservationInfo.isReserved) return true;\n        // If job needs multiple workers, show it even when reserved\n        if (job.workersNeeded > 1) return true;\n        // For single-worker jobs that are reserved:\n        // Only show to the user who reserved it\n        if (job.workersNeeded === 1 && reservationInfo.isReserved) {\n            return currentUserId === reservationInfo.userId;\n        }\n        return true;\n    });\n};\n// Function to get job status history\nasync function getJobStatusHistory(jobId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const history = getStoredJobStatusHistory();\n    return history.filter((entry)=>entry.jobId === jobId).sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\n// Function to get all status history for admin\nasync function getAllJobStatusHistory() {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const history = getStoredJobStatusHistory();\n    return history.sort((a, b)=>new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n}\nasync function acceptJobApplication(applicationId, employerId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const applications = getStoredApplications();\n    const applicationIndex = applications.findIndex((app)=>app.id === applicationId);\n    if (applicationIndex === -1) {\n        throw new Error(\"Application not found\");\n    }\n    const application = applications[applicationIndex];\n    // Verify employer owns the job\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === application.jobId);\n    const job = jobs[jobIndex];\n    if (!job || job.userId !== employerId) {\n        throw new Error(\"You don't have permission to accept this application\");\n    }\n    const updatedApplication = {\n        ...application,\n        status: \"accepted\",\n        acceptedAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n    };\n    applications[applicationIndex] = updatedApplication;\n    saveApplications(applications);\n    const updatedJob = {\n        ...job,\n        status: \"completed\",\n        assignedWorkerId: application.applicantId,\n        completedAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n    };\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    try {\n        const { addWalletTransaction } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n        const paymentAmount = application.proposedBudget;\n        if (!paymentAmount || paymentAmount <= 0) {\n            throw new Error(`Invalid payment amount: ${paymentAmount}`);\n        }\n        // Calculate platform fee (5% default)\n        const platformFeeSettings = await (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.getPlatformFeeSettings)();\n        let platformFeeRate = 0.05 // Default fallback\n        ;\n        let platformFee = 0;\n        if (platformFeeSettings) {\n            const feeCalculation = (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.calculatePlatformFee)(paymentAmount, platformFeeSettings);\n            platformFee = feeCalculation.platformFee;\n            platformFeeRate = platformFeeSettings.feePercentage / 100;\n        } else {\n            platformFee = Math.round(paymentAmount * platformFeeRate * 100) / 100;\n        }\n        const workerAmount = Math.round((paymentAmount - platformFee) * 100) / 100 // Round to 2 decimals\n        ;\n        console.log(`[v0] 💰 Processing instant payment:`);\n        console.log(`[v0] - Total job amount: $${paymentAmount}`);\n        console.log(`[v0] - Platform fee (5%): $${platformFee}`);\n        console.log(`[v0] - Worker receives: $${workerAmount}`);\n        console.log(`[v0] - Worker ID: ${application.applicantId}`);\n        // Add money to worker's withdrawal balance\n        await addWalletTransaction(application.applicantId, {\n            type: \"job_payment\",\n            amount: workerAmount,\n            description: `Payment for job: ${job.title}`,\n            jobId: job.id,\n            fromUserId: employerId\n        });\n        console.log(`[v0] ✅ Payment successfully added to worker ${application.applicantId} wallet: $${workerAmount}`);\n        // Record platform fee\n        await addWalletTransaction(\"platform\", {\n            type: \"platform_fee\",\n            amount: platformFee,\n            description: `Platform fee for job: ${job.title}`,\n            jobId: job.id,\n            fromUserId: employerId\n        });\n        console.log(`[v0] ✅ Platform fee recorded: $${platformFee}`);\n    } catch (error) {\n        console.error(\"[v0] ❌ Error processing instant payment:\", error);\n        throw new Error(`Payment processing failed: ${error.message}`);\n    }\n    // Create notification for applicant\n    const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n    await createNotification({\n        userId: application.applicantId,\n        type: \"job\",\n        title: \"Job Accepted & Payment Released!\",\n        description: `Your application for \"${job.title}\" has been accepted and payment of $${application.proposedBudget - application.proposedBudget * 0.05} has been added to your withdrawal balance!`,\n        actionUrl: `/dashboard/wallet`\n    });\n    // Create notification for employer\n    await createNotification({\n        userId: employerId,\n        type: \"job\",\n        title: \"Job Completed\",\n        description: `Job \"${job.title}\" has been completed and payment has been released to the worker.`,\n        actionUrl: `/dashboard/jobs`\n    });\n    return updatedApplication;\n}\nasync function rejectJobApplication(applicationId, employerId, reason) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const applications = getStoredApplications();\n    const applicationIndex = applications.findIndex((app)=>app.id === applicationId);\n    if (applicationIndex === -1) {\n        throw new Error(\"Application not found\");\n    }\n    const application = applications[applicationIndex];\n    // Verify employer owns the job\n    const jobs = getStoredJobs();\n    const job = jobs.find((j)=>j.id === application.jobId);\n    if (!job || job.userId !== employerId) {\n        throw new Error(\"You don't have permission to reject this application\");\n    }\n    const updatedApplication = {\n        ...application,\n        status: \"rejected\",\n        rejectedAt: new Date().toISOString(),\n        rejectionReason: reason,\n        updatedAt: new Date().toISOString()\n    };\n    applications[applicationIndex] = updatedApplication;\n    saveApplications(applications);\n    // Create notification for applicant\n    const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n    await createNotification({\n        userId: application.applicantId,\n        type: \"job\",\n        title: \"Application Rejected\",\n        description: `Your application for \"${job.title}\" was not selected. Keep applying to other opportunities!`,\n        actionUrl: `/dashboard/applied-jobs`\n    });\n    return updatedApplication;\n}\nasync function getUserJobs(userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const userJobs = jobs.filter((job)=>job.userId === userId);\n    const jobsWithCounts = await Promise.all(userJobs.map(async (job)=>{\n        try {\n            // Get applications for this job\n            const applications = await getJobApplications(job.id);\n            const applicationsCount = applications.length;\n            console.log(`[v0] Job ${job.id} (${job.title}): Found ${applicationsCount} applications`);\n            // Update the job with actual counts\n            return {\n                ...job,\n                applicationsCount,\n                // For now, we'll use a simple view count based on applications\n                // In a real system, this would be tracked separately\n                viewsCount: Math.max(job.viewsCount || 0, applicationsCount * 2)\n            };\n        } catch (error) {\n            console.error(`[v0] Error counting applications for job ${job.id}:`, error);\n            return job;\n        }\n    }));\n    return jobsWithCounts;\n}\nasync function applyToJob(data) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    console.log(\"[v0] 🔍 WORKER VALIDATION: Checking application for job:\", data.jobId, \"by worker:\", data.applicantId);\n    const jobs = getStoredJobs();\n    const job = jobs.find((j)=>j.id === data.jobId);\n    if (!job) {\n        throw new Error(\"Job not found\");\n    }\n    if (job.status !== \"approved\") {\n        throw new Error(\"Job is not available for applications\");\n    }\n    // Check if user already applied to this job\n    const existingApplications = getStoredApplications();\n    const existingApplication = existingApplications.find((app)=>app.jobId === data.jobId && app.applicantId === data.applicantId);\n    if (existingApplication) {\n        console.log(\"[v0] ⚠️ WORKER VALIDATION: User already applied to this job - treating as resubmission\");\n        // Update existing application instead of creating new one\n        const applications = JSON.parse(localStorage.getItem(\"job_applications\") || \"[]\");\n        const applicationIndex = applications.findIndex((app)=>app.id === existingApplication.id);\n        if (applicationIndex !== -1) {\n            applications[applicationIndex] = {\n                ...applications[applicationIndex],\n                coverLetter: data.coverLetter,\n                proposedBudget: data.proposedBudget,\n                estimatedDuration: data.estimatedDuration,\n                portfolioLinks: data.portfolioLinks,\n                updatedAt: new Date().toISOString(),\n                resubmissionCount: (applications[applicationIndex].resubmissionCount || 0) + 1\n            };\n            localStorage.setItem(\"job_applications\", JSON.stringify(applications));\n            console.log(\"[v0] ✅ WORKER VALIDATION: Application updated as resubmission\");\n            return applications[applicationIndex];\n        }\n    }\n    // Check if job has reached worker limit\n    const acceptedApplications = existingApplications.filter((app)=>app.status === \"accepted\");\n    const workersNeeded = job.workersNeeded || job.maxWorkers || 1;\n    if (acceptedApplications.length >= workersNeeded) {\n        throw new Error(`This job has already reached its worker limit of ${workersNeeded} workers`);\n    }\n    console.log(\"[v0] ✅ WORKER VALIDATION: New application allowed\");\n    console.log(\"[v0] 📊 WORKER VALIDATION: Current accepted workers:\", acceptedApplications.length, \"/ Needed:\", workersNeeded);\n    // Get user data for application\n    const { getAllUsers } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./auth */ \"(ssr)/./lib/auth.ts\"));\n    const users = getAllUsers();\n    const user = users.find((u)=>u.id === data.applicantId);\n    if (!user) {\n        throw new Error(\"User not found\");\n    }\n    const newApplication = {\n        id: `app_${Date.now()}`,\n        jobId: data.jobId,\n        applicantId: data.applicantId,\n        coverLetter: data.coverLetter,\n        proposedBudget: data.proposedBudget,\n        estimatedDuration: data.estimatedDuration,\n        portfolioLinks: data.portfolioLinks,\n        status: \"pending\",\n        createdAt: new Date().toISOString(),\n        applicant: {\n            id: user.id,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            username: user.username,\n            avatar: user.avatar,\n            rating: user.rating,\n            totalReviews: user.totalReviews,\n            skills: user.skills\n        }\n    };\n    const applications = getStoredApplications();\n    applications.push(newApplication);\n    saveApplications(applications);\n    // Update job application count\n    const jobIndex = jobs.findIndex((j)=>j.id === data.jobId);\n    if (jobIndex !== -1) {\n        jobs[jobIndex].applicationsCount = (jobs[jobIndex].applicationsCount || 0) + 1;\n        saveJobs(jobs);\n    }\n    // Create notification for job poster\n    const { createNotification } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./notifications */ \"(ssr)/./lib/notifications.ts\"));\n    await createNotification({\n        userId: job.userId,\n        type: \"job\",\n        title: \"New Job Application\",\n        description: `${user.firstName} ${user.lastName} applied for your job \"${job.title}\"`,\n        actionUrl: `/dashboard/jobs/${job.id}/applications`\n    });\n    return newApplication;\n}\nasync function createJob(data) {\n    await new Promise((resolve)=>setTimeout(resolve, 800));\n    console.log(\"[v0] 💼 JOB CREATION: Starting job creation process\");\n    console.log(\"[v0] 💼 JOB CREATION: Workers needed:\", data.workersNeeded);\n    console.log(\"[v0] 💼 JOB CREATION: Budget per worker:\", data.budgetMin, \"-\", data.budgetMax);\n    console.log(\"[v0] 💼 JOB CREATION: Screenshot requirements:\", data.requireScreenshots || 0);\n    console.log(\"[v0] 💼 JOB CREATION: Approval type:\", data.approvalType);\n    console.log(\"[v0] 💼 JOB CREATION: Manual approval days:\", data.manualApprovalDays);\n    console.log(\"[v0] 💼 JOB CREATION: Country restrictions enabled:\", data.enableCountryRestrictions);\n    console.log(\"[v0] 💼 JOB CREATION: Restriction type:\", data.restrictionType);\n    console.log(\"[v0] 💼 JOB CREATION: Allowed countries:\", data.allowedCountries);\n    console.log(\"[v0] 💼 JOB CREATION: Restricted countries:\", data.restrictedCountries);\n    const isInstantApproval = data.approvalType === \"instant\";\n    const isInstantApprovalEnabled = ()=>{\n        try {\n            // Check if we're in browser environment\n            if (false) {} else {\n                // On server side or when localStorage is not available, default to true for instant approval requests\n                console.log(\"[v0] 🔧 INSTANT-APPROVAL: Server side or no localStorage, defaulting to true for instant requests\");\n                return isInstantApproval;\n            }\n        } catch (error) {\n            console.error(\"[v0] 🔧 INSTANT-APPROVAL: Error checking setting:\", error);\n            // If there's an error, allow instant approval if user requested it\n            return isInstantApproval;\n        }\n    };\n    const getDefaultManualApprovalDays = ()=>{\n        try {\n            if (false) {}\n            return 3 // Default fallback\n            ;\n        } catch (error) {\n            console.error(\"[v0] 🔧 DEFAULT-DAYS: Error getting default days:\", error);\n            return 3;\n        }\n    };\n    const canUseInstantApproval = isInstantApproval && isInstantApprovalEnabled();\n    const existingJobs = getStoredJobs();\n    const nextJobNumber = existingJobs.length + 1;\n    const formattedJobId = String(nextJobNumber).padStart(3, \"0\");\n    console.log(\"[v0] 💼 JOB CREATION: Generated job number:\", nextJobNumber, \"formatted as:\", formattedJobId);\n    const jobStatus = \"approved\" // All jobs are approved immediately, instant payment happens on work submission\n    ;\n    const finalManualApprovalDays = data.manualApprovalDays || getDefaultManualApprovalDays();\n    console.log(\"[v0] 🔧 INSTANT-APPROVAL: User requested instant approval:\", isInstantApproval);\n    console.log(\"[v0] 🔧 INSTANT-APPROVAL: Can use instant approval:\", canUseInstantApproval);\n    console.log(\"[v0] 🔧 INSTANT-APPROVAL: Job status will be:\", jobStatus);\n    console.log(\"[v0] 🔧 MANUAL-APPROVAL: Final manual approval days:\", finalManualApprovalDays);\n    const budgetPerWorker = data.budgetMax || data.budgetMin;\n    const baseJobCost = budgetPerWorker * data.workersNeeded;\n    // Calculate screenshot costs\n    let screenshotCost = 0;\n    if (data.requireScreenshots > 0) {\n        try {\n            const { calculateScreenshotCosts } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./screenshot-pricing */ \"(ssr)/./lib/screenshot-pricing.ts\"));\n            const screenshotCalculation = await calculateScreenshotCosts(data.requireScreenshots, baseJobCost);\n            screenshotCost = screenshotCalculation.totalScreenshotCost;\n            console.log(\"[v0] 📸 JOB CREATION: Screenshot cost calculated:\", screenshotCost);\n        } catch (error) {\n            console.error(\"[v0] 📸 JOB CREATION: Error calculating screenshot costs:\", error);\n            // Fallback calculation\n            screenshotCost = data.requireScreenshots * 0.05;\n        }\n    }\n    const subtotal = baseJobCost + screenshotCost;\n    let platformFee = 0;\n    let platformFeeRate = 0.05 // Default fallback\n    ;\n    try {\n        const platformFeeSettings = await (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.getPlatformFeeSettings)();\n        if (platformFeeSettings) {\n            const feeCalculation = (0,_platform_fee__WEBPACK_IMPORTED_MODULE_1__.calculatePlatformFee)(subtotal, platformFeeSettings);\n            platformFee = feeCalculation.platformFee;\n            platformFeeRate = platformFeeSettings.feePercentage / 100;\n            console.log(\"[v0] 💰 JOB CREATION: Using configurable platform fee:\", platformFeeSettings.feePercentage + \"%\");\n        } else {\n            platformFee = subtotal * platformFeeRate;\n            console.log(\"[v0] 💰 JOB CREATION: Using default platform fee: 5%\");\n        }\n    } catch (error) {\n        console.error(\"[v0] 💰 JOB CREATION: Error loading platform fee settings, using default:\", error);\n        platformFee = subtotal * platformFeeRate;\n    }\n    const totalWithFees = subtotal + platformFee;\n    console.log(\"[v0] 💰 JOB CREATION: Base job cost:\", baseJobCost);\n    console.log(\"[v0] 💰 JOB CREATION: Screenshot cost:\", screenshotCost);\n    console.log(\"[v0] 💰 JOB CREATION: Subtotal:\", subtotal);\n    console.log(\"[v0] 💰 JOB CREATION: Platform fee:\", platformFee);\n    console.log(\"[v0] 💰 JOB CREATION: Total with fees:\", totalWithFees);\n    // Check and deduct from user's deposit wallet\n    try {\n        const { getWallet, addWalletTransaction } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n        const wallet = await getWallet(data.userId);\n        if (wallet.depositBalance < totalWithFees) {\n            throw new Error(`Insufficient deposit balance. Required: $${totalWithFees.toFixed(2)}, Available: $${wallet.depositBalance.toFixed(2)}`);\n        }\n        let transactionDescription = `Job creation deposit for: ${data.title} (${data.workersNeeded} workers × $${budgetPerWorker}`;\n        if (screenshotCost > 0) {\n            transactionDescription += ` + $${screenshotCost.toFixed(2)} screenshot fee`;\n        }\n        transactionDescription += ` + $${platformFee.toFixed(2)} platform fee)`;\n        // Deduct estimated cost from deposit balance\n        await addWalletTransaction({\n            userId: data.userId,\n            type: \"payment\",\n            amount: -totalWithFees,\n            description: transactionDescription,\n            referenceId: `job_${Date.now()}`,\n            referenceType: \"job_creation\",\n            balanceType: \"deposit\"\n        });\n        console.log(\"[v0] ✅ JOB CREATION: Deposit deducted successfully:\", totalWithFees);\n    } catch (error) {\n        console.error(\"[v0] ❌ JOB CREATION: Deposit deduction failed:\", error);\n        throw new Error(`Failed to process job creation deposit: ${error.message}`);\n    }\n    const newJob = {\n        id: `job_${Date.now()}`,\n        jobNumber: nextJobNumber,\n        formattedJobId: formattedJobId,\n        userId: data.userId,\n        categoryId: data.categoryId,\n        subcategoryId: data.subcategoryId,\n        title: data.title,\n        description: data.description,\n        requirements: data.requirements,\n        instructions: data.instructions,\n        budgetMin: data.budgetMin,\n        budgetMax: data.budgetMax,\n        deadline: data.deadline,\n        location: data.location || \"Remote\",\n        isRemote: true,\n        status: jobStatus,\n        priority: \"normal\",\n        skillsRequired: [],\n        applicationsCount: 0,\n        viewsCount: 0,\n        workersNeeded: data.workersNeeded,\n        maxWorkers: data.workersNeeded,\n        tags: data.tags || [],\n        attachments: data.attachments || [],\n        requireScreenshots: data.requireScreenshots || 0,\n        screenshotCost: (data.requireScreenshots || 0) * 0.05,\n        estimatedApprovalDays: data.estimatedApprovalDays || 1,\n        approvalType: data.approvalType || \"manual\",\n        manualApprovalDays: finalManualApprovalDays,\n        isInstantApprovalEnabled: canUseInstantApproval,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n        submittedAt: new Date().toISOString(),\n        approvedAt: new Date().toISOString(),\n        approvedBy: \"System\",\n        approvalReason: \"Job approved for posting\",\n        estimatedTotalCost: subtotal,\n        depositDeducted: totalWithFees,\n        enableCountryRestrictions: data.enableCountryRestrictions || false,\n        restrictionType: data.restrictionType || \"include\",\n        allowedCountries: data.allowedCountries || [],\n        restrictedCountries: data.restrictedCountries || [],\n        category: {\n            id: data.categoryId,\n            name: \"Unknown Category\",\n            slug: \"unknown\"\n        }\n    };\n    const jobs = getStoredJobs();\n    jobs.push(newJob);\n    saveJobs(jobs);\n    return newJob;\n}\nasync function toggleJobOn(jobId, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId && j.userId === userId);\n    if (jobIndex === -1) throw new Error(\"Job not found or unauthorized\");\n    const job = jobs[jobIndex];\n    const oldStatus = job.status;\n    // Only allow toggle if job was previously approved/open or suspended\n    if (![\n        \"suspended\",\n        \"open\",\n        \"approved\"\n    ].includes(oldStatus)) {\n        throw new Error(\"Job cannot be turned on from current status\");\n    }\n    const updatedJob = await updateJobStatus(jobId, \"open\", userId);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"open\", userId, \"Job turned on by owner\", {\n        userAction: \"toggle_on\",\n        instantToggle: true\n    });\n    return updatedJob;\n}\nasync function toggleJobOff(jobId, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 300));\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((j)=>j.id === jobId && j.userId === userId);\n    if (jobIndex === -1) throw new Error(\"Job not found or unauthorized\");\n    const job = jobs[jobIndex];\n    const oldStatus = job.status;\n    // Only allow toggle if job is currently open/approved\n    if (![\n        \"open\",\n        \"approved\"\n    ].includes(oldStatus)) {\n        throw new Error(\"Job cannot be turned off from current status\");\n    }\n    const updatedJob = await updateJobStatus(jobId, \"suspended\", userId);\n    jobs[jobIndex] = updatedJob;\n    saveJobs(jobs);\n    recordStatusChange(jobId, oldStatus, \"suspended\", userId, \"Job turned off by owner\", {\n        userAction: \"toggle_off\",\n        instantToggle: true\n    });\n    return updatedJob;\n}\nasync function updateJobWorkers(jobId, newWorkerCount, userId) {\n    await new Promise((resolve)=>setTimeout(resolve, 500));\n    console.log(\"[v0] 👥 UPDATE-WORKERS: Starting worker count update for job:\", jobId);\n    console.log(\"[v0] 👥 UPDATE-WORKERS: New worker count:\", newWorkerCount);\n    const jobs = getStoredJobs();\n    const jobIndex = jobs.findIndex((job)=>job.id === jobId && job.userId === userId);\n    if (jobIndex === -1) {\n        console.log(\"[v0] ❌ UPDATE-WORKERS: Job not found or unauthorized\");\n        return {\n            success: false,\n            message: \"Job not found or you don't have permission to modify it.\"\n        };\n    }\n    const job = jobs[jobIndex];\n    const currentWorkerCount = job.workersNeeded;\n    const workerDifference = newWorkerCount - currentWorkerCount;\n    console.log(\"[v0] 👥 UPDATE-WORKERS: Current workers:\", currentWorkerCount);\n    console.log(\"[v0] 👥 UPDATE-WORKERS: Worker difference:\", workerDifference);\n    if (workerDifference === 0) {\n        console.log(\"[v0] 👥 UPDATE-WORKERS: No change in worker count\");\n        return {\n            success: true,\n            message: \"Worker count unchanged.\"\n        };\n    }\n    if (workerDifference < 0) {\n        console.log(\"[v0] 👥 UPDATE-WORKERS: Reducing worker count - no additional payment needed\");\n        jobs[jobIndex].workersNeeded = newWorkerCount;\n        localStorage.setItem(JOBS_STORAGE_KEY, JSON.stringify(jobs));\n        console.log(\"[v0] 👥 UPDATE-WORKERS: Updated job saved to localStorage with key:\", JOBS_STORAGE_KEY);\n        return {\n            success: true,\n            message: `Worker count reduced to ${newWorkerCount}.`\n        };\n    }\n    const costPerWorker = job.budgetMax || job.budgetMin || 0;\n    const additionalBaseCost = workerDifference * costPerWorker;\n    // Calculate additional screenshot costs proportionally\n    let additionalScreenshotCost = 0;\n    if (job.requireScreenshots > 0) {\n        try {\n            const { calculateScreenshotCosts } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./screenshot-pricing */ \"(ssr)/./lib/screenshot-pricing.ts\"));\n            // Calculate screenshot cost for new total workers\n            const newTotalBaseCost = newWorkerCount * costPerWorker;\n            // Calculate current screenshot cost for comparison\n            const currentTotalBaseCost = currentWorkerCount * costPerWorker;\n            const currentScreenshotCost = (await calculateScreenshotCosts(job.requireScreenshots, currentTotalBaseCost)).totalScreenshotCost;\n            const newScreenshotCost = (await calculateScreenshotCosts(job.requireScreenshots, newTotalBaseCost)).totalScreenshotCost;\n            additionalScreenshotCost = newScreenshotCost - currentScreenshotCost;\n            console.log(\"[v0] 👥 UPDATE-WORKERS: Additional screenshot cost:\", additionalScreenshotCost);\n        } catch (error) {\n            console.error(\"[v0] ❌ UPDATE-WORKERS: Error calculating screenshot costs:\", error);\n        }\n    }\n    const platformFeeRate = 0.05;\n    const subtotal = additionalBaseCost + additionalScreenshotCost;\n    const platformFee = subtotal * platformFeeRate;\n    const totalAdditionalCost = subtotal + platformFee;\n    console.log(\"[v0] 👥 UPDATE-WORKERS: Cost breakdown:\", {\n        additionalBaseCost,\n        additionalScreenshotCost,\n        platformFee,\n        totalAdditionalCost\n    });\n    const { getWallet } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n    // Check wallet balance\n    const wallet = await getWallet(userId);\n    if (wallet.depositBalance < totalAdditionalCost) {\n        console.log(\"[v0] ❌ UPDATE-WORKERS: Insufficient balance\");\n        return {\n            success: false,\n            message: `Insufficient deposit balance. Required: $${totalAdditionalCost.toFixed(2)}, Available: $${wallet.depositBalance.toFixed(2)}`\n        };\n    }\n    const { addWalletTransaction } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./wallet */ \"(ssr)/./lib/wallet.ts\"));\n    let transactionDescription = `Additional workers for job: ${job.title} (+${workerDifference} workers)`;\n    if (additionalScreenshotCost > 0) {\n        transactionDescription += ` + $${additionalScreenshotCost.toFixed(2)} screenshot fee`;\n    }\n    transactionDescription += ` + $${platformFee.toFixed(2)} platform fee)`;\n    // Deduct from wallet\n    await addWalletTransaction({\n        userId: userId,\n        type: \"payment\",\n        amount: -totalAdditionalCost,\n        description: transactionDescription,\n        referenceId: jobId,\n        referenceType: \"worker_update\",\n        balanceType: \"deposit\"\n    });\n    const newTotalBaseCost = newWorkerCount * costPerWorker;\n    let newTotalScreenshotCost = 0;\n    if (job.requireScreenshots > 0) {\n        try {\n            const { calculateScreenshotCosts } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ./screenshot-pricing */ \"(ssr)/./lib/screenshot-pricing.ts\"));\n            newTotalScreenshotCost = (await calculateScreenshotCosts(job.requireScreenshots, newTotalBaseCost)).totalScreenshotCost;\n        } catch (error) {\n            console.error(\"[v0] Error recalculating total screenshot costs:\", error);\n        }\n    }\n    const newSubtotal = newTotalBaseCost + newTotalScreenshotCost;\n    const newPlatformFee = newSubtotal * platformFeeRate;\n    const newTotalCost = newSubtotal + newPlatformFee;\n    jobs[jobIndex] = {\n        ...job,\n        workersNeeded: newWorkerCount,\n        estimatedTotalCost: newTotalCost\n    };\n    localStorage.setItem(JOBS_STORAGE_KEY, JSON.stringify(jobs));\n    console.log(\"[v0] 👥 UPDATE-WORKERS: Updated job saved to localStorage with key:\", JOBS_STORAGE_KEY);\n    console.log(\"[v0] ✅ UPDATE-WORKERS: Worker count updated successfully\");\n    console.log(\"[v0] 👥 UPDATE-WORKERS: New total cost:\", newTotalCost.toFixed(2));\n    return {\n        success: true,\n        message: `Worker count updated to ${newWorkerCount}. Additional cost: $${totalAdditionalCost.toFixed(2)}`,\n        additionalCost: totalAdditionalCost\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/jobs.ts\n");

/***/ }),

/***/ "(ssr)/./lib/local-reservation-storage.ts":
/*!******************************************!*\
  !*** ./lib/local-reservation-storage.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   localReservationStorage: () => (/* binding */ localReservationStorage)\n/* harmony export */ });\nclass LocalReservationStorage {\n    // Get all reservations from localStorage\n    getReservations() {\n        if (true) return [];\n        try {\n            const stored = localStorage.getItem(this.RESERVATIONS_KEY);\n            return stored ? JSON.parse(stored) : [];\n        } catch (error) {\n            console.error(\"Error loading reservations from localStorage:\", error);\n            return [];\n        }\n    }\n    // Save reservations to localStorage\n    saveReservations(reservations) {\n        if (true) return;\n        try {\n            localStorage.setItem(this.RESERVATIONS_KEY, JSON.stringify(reservations));\n            this.dispatchStorageEvent(this.RESERVATIONS_KEY, reservations);\n        } catch (error) {\n            console.error(\"Error saving reservations to localStorage:\", error);\n        }\n    }\n    // Get reservation settings\n    getSettings() {\n        if (true) {\n            return this.getDefaultSettings();\n        }\n        try {\n            const stored = localStorage.getItem(this.SETTINGS_KEY);\n            return stored ? JSON.parse(stored) : this.getDefaultSettings();\n        } catch (error) {\n            console.error(\"Error loading settings from localStorage:\", error);\n            return this.getDefaultSettings();\n        }\n    }\n    // Save reservation settings\n    saveSettings(settings) {\n        if (true) return;\n        try {\n            localStorage.setItem(this.SETTINGS_KEY, JSON.stringify(settings));\n        } catch (error) {\n            console.error(\"Error saving settings to localStorage:\", error);\n        }\n    }\n    // Get job reservation status (which jobs are reserved)\n    getJobReservations() {\n        if (true) return {};\n        try {\n            const stored = localStorage.getItem(this.JOB_RESERVATIONS_KEY);\n            return stored ? JSON.parse(stored) : {};\n        } catch (error) {\n            console.error(\"Error loading job reservations from localStorage:\", error);\n            return {};\n        }\n    }\n    // Save job reservation status\n    saveJobReservations(jobReservations) {\n        if (true) return;\n        try {\n            localStorage.setItem(this.JOB_RESERVATIONS_KEY, JSON.stringify(jobReservations));\n            this.dispatchStorageEvent(this.JOB_RESERVATIONS_KEY, jobReservations);\n        } catch (error) {\n            console.error(\"Error saving job reservations to localStorage:\", error);\n        }\n    }\n    // Create a new reservation\n    createReservation(jobId, userId, reservationMinutes) {\n        const now = new Date();\n        const expiresAt = new Date(now.getTime() + reservationMinutes * 60 * 1000);\n        const reservation = {\n            id: this.generateId(),\n            jobId,\n            userId,\n            reservedAt: now.toISOString(),\n            expiresAt: expiresAt.toISOString(),\n            status: \"active\",\n            createdAt: now.toISOString(),\n            updatedAt: now.toISOString()\n        };\n        // Add to reservations list\n        const reservations = this.getReservations();\n        reservations.push(reservation);\n        this.saveReservations(reservations);\n        // Update job reservations mapping\n        const jobReservations = this.getJobReservations();\n        jobReservations[jobId] = {\n            userId,\n            expiresAt: expiresAt.toISOString()\n        };\n        this.saveJobReservations(jobReservations);\n        return reservation;\n    }\n    // Cancel a reservation\n    cancelReservation(reservationId) {\n        const reservations = this.getReservations();\n        const reservationIndex = reservations.findIndex((r)=>r.id === reservationId);\n        if (reservationIndex === -1) return false;\n        const reservation = reservations[reservationIndex];\n        reservation.status = \"cancelled\";\n        reservation.updatedAt = new Date().toISOString();\n        this.saveReservations(reservations);\n        // Remove from job reservations\n        const jobReservations = this.getJobReservations();\n        delete jobReservations[reservation.jobId];\n        this.saveJobReservations(jobReservations);\n        return true;\n    }\n    // Check and expire old reservations\n    expireOldReservations() {\n        const now = new Date();\n        const reservations = this.getReservations();\n        const jobReservations = this.getJobReservations();\n        const expiredReservations = [];\n        let hasChanges = false;\n        reservations.forEach((reservation)=>{\n            if (reservation.status === \"active\" && new Date(reservation.expiresAt) < now) {\n                reservation.status = \"expired\";\n                reservation.updatedAt = now.toISOString();\n                expiredReservations.push(reservation);\n                // Remove from job reservations\n                delete jobReservations[reservation.jobId];\n                hasChanges = true;\n            }\n        });\n        if (hasChanges) {\n            this.saveReservations(reservations);\n            this.saveJobReservations(jobReservations);\n        }\n        return expiredReservations;\n    }\n    // Get user's active reservations\n    getUserActiveReservations(userId) {\n        const reservations = this.getReservations();\n        return reservations.filter((r)=>r.userId === userId && r.status === \"active\");\n    }\n    // Check if job is reserved\n    isJobReserved(jobId) {\n        const jobReservations = this.getJobReservations();\n        const reservation = jobReservations[jobId];\n        if (!reservation) {\n            return {\n                isReserved: false\n            };\n        }\n        // Check if expired\n        if (new Date(reservation.expiresAt) < new Date()) {\n            // Clean up expired reservation\n            delete jobReservations[jobId];\n            this.saveJobReservations(jobReservations);\n            return {\n                isReserved: false\n            };\n        }\n        return {\n            isReserved: true,\n            userId: reservation.userId,\n            expiresAt: reservation.expiresAt\n        };\n    }\n    // Get default settings\n    getDefaultSettings() {\n        return {\n            id: \"default\",\n            isEnabled: true,\n            defaultReservationMinutes: 60,\n            maxReservationMinutes: 1440,\n            maxConcurrentReservations: 5,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n    }\n    // Generate a simple ID\n    generateId() {\n        return Date.now().toString(36) + Math.random().toString(36).substr(2);\n    }\n    // Clear all data (for testing/reset)\n    clearAll() {\n        if (true) return;\n        localStorage.removeItem(this.RESERVATIONS_KEY);\n        localStorage.removeItem(this.SETTINGS_KEY);\n        localStorage.removeItem(this.JOB_RESERVATIONS_KEY);\n    }\n    dispatchStorageEvent(key, data) {\n        if (false) {}\n    }\n    constructor(){\n        this.RESERVATIONS_KEY = \"microjob_reservations\";\n        this.SETTINGS_KEY = \"microjob_reservation_settings\";\n        this.JOB_RESERVATIONS_KEY = \"microjob_job_reservations\";\n    }\n}\n// Export singleton instance\nconst localReservationStorage = new LocalReservationStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/local-reservation-storage.ts\n");

/***/ })

};
;