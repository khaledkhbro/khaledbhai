"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_screenshot-pricing_ts"],{

/***/ "(app-pages-browser)/./lib/screenshot-pricing.ts":
/*!***********************************!*\
  !*** ./lib/screenshot-pricing.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateScreenshotCosts: () => (/* binding */ calculateScreenshotCosts),\n/* harmony export */   getScreenshotPricingSettings: () => (/* binding */ getScreenshotPricingSettings),\n/* harmony export */   getScreenshotPricingTiers: () => (/* binding */ getScreenshotPricingTiers),\n/* harmony export */   updateScreenshotPricingSetting: () => (/* binding */ updateScreenshotPricingSetting),\n/* harmony export */   updateScreenshotPricingTier: () => (/* binding */ updateScreenshotPricingTier)\n/* harmony export */ });\n// Screenshot pricing management functions - localStorage based\n// localStorage keys\nconst STORAGE_KEYS = {\n    SETTINGS: \"screenshot_pricing_settings\",\n    TIERS: \"screenshot_pricing_tiers\"\n};\n// Default settings\nconst DEFAULT_SETTINGS = {\n    max_screenshots_allowed: 5,\n    default_screenshot_fee: 0.05,\n    enable_percentage_pricing: true,\n    platform_screenshot_fee: 0\n};\n// Default tiers\nconst DEFAULT_TIERS = [\n    {\n        id: 1,\n        screenshot_number: 1,\n        percentage_fee: 0,\n        is_free: true,\n        is_active: true\n    },\n    {\n        id: 2,\n        screenshot_number: 2,\n        percentage_fee: 3,\n        is_free: false,\n        is_active: true\n    },\n    {\n        id: 3,\n        screenshot_number: 3,\n        percentage_fee: 3,\n        is_free: false,\n        is_active: true\n    },\n    {\n        id: 4,\n        screenshot_number: 4,\n        percentage_fee: 5,\n        is_free: false,\n        is_active: true\n    },\n    {\n        id: 5,\n        screenshot_number: 5,\n        percentage_fee: 5,\n        is_free: false,\n        is_active: true\n    }\n];\n// Initialize default data if not exists\nfunction initializeDefaultData() {\n    if (false) {}\n    if (!localStorage.getItem(STORAGE_KEYS.SETTINGS)) {\n        localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(DEFAULT_SETTINGS));\n    }\n    if (!localStorage.getItem(STORAGE_KEYS.TIERS)) {\n        localStorage.setItem(STORAGE_KEYS.TIERS, JSON.stringify(DEFAULT_TIERS));\n    }\n}\n// Get screenshot pricing tiers from localStorage\nasync function getScreenshotPricingTiers() {\n    try {\n        if (false) {}\n        initializeDefaultData();\n        const stored = localStorage.getItem(STORAGE_KEYS.TIERS);\n        if (stored) {\n            const tiers = JSON.parse(stored);\n            return tiers.filter((tier)=>tier.is_active).sort((a, b)=>a.screenshot_number - b.screenshot_number);\n        }\n        return DEFAULT_TIERS;\n    } catch (error) {\n        console.error(\"Error in getScreenshotPricingTiers:\", error);\n        return DEFAULT_TIERS;\n    }\n}\n// Get screenshot pricing settings from localStorage\nasync function getScreenshotPricingSettings() {\n    try {\n        if (false) {}\n        initializeDefaultData();\n        const stored = localStorage.getItem(STORAGE_KEYS.SETTINGS);\n        if (stored) {\n            return JSON.parse(stored);\n        }\n        return DEFAULT_SETTINGS;\n    } catch (error) {\n        console.error(\"Error in getScreenshotPricingSettings:\", error);\n        return DEFAULT_SETTINGS;\n    }\n}\n// Calculate screenshot costs based on job cost and screenshot count\nasync function calculateScreenshotCosts(screenshotCount, totalJobCost) {\n    try {\n        const [tiers, settings] = await Promise.all([\n            getScreenshotPricingTiers(),\n            getScreenshotPricingSettings()\n        ]);\n        const screenshotCosts = [];\n        let totalScreenshotCost = 0;\n        for(let i = 1; i <= Math.min(screenshotCount, settings.max_screenshots_allowed); i++){\n            const tier = tiers.find((t)=>t.screenshot_number === i);\n            if (tier) {\n                const isFree = tier.is_free;\n                const percentage = tier.percentage_fee;\n                const cost = isFree ? 0 : totalJobCost * percentage / 100;\n                screenshotCosts.push({\n                    screenshotNumber: i,\n                    cost,\n                    percentage,\n                    isFree\n                });\n                totalScreenshotCost += cost;\n            } else {\n                // Fallback to default pricing if tier not found\n                const cost = settings.enable_percentage_pricing ? 0 : settings.default_screenshot_fee;\n                screenshotCosts.push({\n                    screenshotNumber: i,\n                    cost,\n                    percentage: 0,\n                    isFree: false\n                });\n                totalScreenshotCost += cost;\n            }\n        }\n        // Generate breakdown text\n        const breakdown = screenshotCosts.map((sc)=>{\n            if (sc.isFree) {\n                return \"Screenshot \".concat(sc.screenshotNumber, \": Free\");\n            } else if (sc.percentage > 0) {\n                return \"Screenshot \".concat(sc.screenshotNumber, \": \").concat(sc.percentage, \"% ($\").concat(sc.cost.toFixed(2), \")\");\n            } else {\n                return \"Screenshot \".concat(sc.screenshotNumber, \": $\").concat(sc.cost.toFixed(2));\n            }\n        }).join(\", \");\n        return {\n            screenshotCount: Math.min(screenshotCount, settings.max_screenshots_allowed),\n            totalJobCost,\n            screenshotCosts,\n            totalScreenshotCost,\n            breakdown\n        };\n    } catch (error) {\n        console.error(\"Error calculating screenshot costs:\", error);\n        // Fallback calculation\n        const fallbackCost = screenshotCount * 0.05;\n        return {\n            screenshotCount,\n            totalJobCost,\n            screenshotCosts: [],\n            totalScreenshotCost: fallbackCost,\n            breakdown: \"\".concat(screenshotCount, \" screenshots �� $0.05 = $\").concat(fallbackCost.toFixed(2))\n        };\n    }\n}\n// Update screenshot pricing tier (admin function)\nasync function updateScreenshotPricingTier(tierId, updates) {\n    try {\n        if (false) {}\n        const tiers = await getScreenshotPricingTiers();\n        const allTiers = JSON.parse(localStorage.getItem(STORAGE_KEYS.TIERS) || \"[]\");\n        const updatedTiers = allTiers.map((tier)=>tier.id === tierId ? {\n                ...tier,\n                ...updates\n            } : tier);\n        localStorage.setItem(STORAGE_KEYS.TIERS, JSON.stringify(updatedTiers));\n    } catch (error) {\n        console.error(\"Error in updateScreenshotPricingTier:\", error);\n        throw error;\n    }\n}\n// Update screenshot pricing setting (admin function)\nasync function updateScreenshotPricingSetting(settingName, settingValue) {\n    try {\n        if (false) {}\n        const settings = await getScreenshotPricingSettings();\n        const updatedSettings = {\n            ...settings,\n            [settingName]: settingValue\n        };\n        localStorage.setItem(STORAGE_KEYS.SETTINGS, JSON.stringify(updatedSettings));\n    } catch (error) {\n        console.error(\"Error in updateScreenshotPricingSetting:\", error);\n        throw error;\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/screenshot-pricing.ts\n"));

/***/ })

}]);